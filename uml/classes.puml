@startuml quizzical


class Tag << (S,#cccccc) Struct >>
class Tag {
    - name : string
}

class Ratio << (S,#cccccc) Struct >>
class Ratio {
    - antecedent : int
    - consequent : int
    + ToString() : string
    + {static} Normalize(r:Ratio) : Ratio
    + setAntecedent (a:int) : void
    + setConsequent (c:int) : void
    + getConsequent () : int
    + getAntecedent () : int
}

Measurable *-- Ratio
interface Measurable {
    + {abstract} getResult() : Result
    + {abstract} getDifficulty() : Difficulty
    + {abstract} getAttempts() : int
    + {abstract} setAttempts() : int
    + {abstract} getSuccessRate() : Ratio
    + {abstract} setSuccessRate() : Ratio
}

Measurable "1" *-- "1" Difficulty : contains
enum Difficulty {
    EASY
    MODERATE
    HARD
}

Measurable "1" *-- "1" Result : contains
enum Result {
    FAILED
    PASSED
    UNATTEMPTED
}

Catagorizable "many" *-- "many" Tag :  contains
interface Catagorizable {
    + {abstract} getType() : TestType
    + {abstract} getTags() : Tag
}

Catagorizable "1" *-- "1" TestType : contains
enum TestType {
    MULTIPLE_CHOICE
    SHORT_ANSWER
    TRUE_FALSE
}

Question ..|> Catagorizable
Question ..|> Measurable
Question *-- Answer
abstract Question <T> {
    + {abstract} setQuestion() : void
    + {abstract} getQuestion() : string
    + {abstract} getAnswer() : T
    + {abstract} setAnswer (value:T) : void
}

CheckableQuestion --|> Question
class CheckableQuestion <T> {
    + checkAnswer (attempt:T) : bool
}

MultipleChoice    --|> CheckableQuestion
MultipleSelection --|> CheckableQuestion
ShortAnswer       --|> CheckableQuestion
TrueFalse         --|> CheckableQuestion
class ShortAnswer { 

}
class TrueFalse { 

}

Test ..|> Catagorizable
Test ..|> Measurable
abstract Test {
    - score : int
    ..Getters & Setters..
    + {abstract} getScore() : int
    + {abstract} setScore(value:int)
}


QuestionSet "1" *-- "many" TrueFalse: contains
QuestionSet "1" *-- "many" ShortAnswer: contains
QuestionSet "1" *-- "many" MultipleChoice: contains
QuestionSet "1" *-- "many" MultipleSelection: contains
QuestionSet ..|> Test
class QuestionSet<T> { 

}

Answer ..|> Catagorizable
class Answer<T> {
    - value : T
    - type : TestType
    + {static} Evaluate (solution:Answer<string>, attempt:string) : boolean
    + {static} Evaluate (solution:Answer<bool>, attempt:bool) : boolean
    + {static} Evaluate (solution:Answer<int>, attempt:int) : boolean
    + {static} Evaluate (solution:Answer<int[]>, attempt:int[]) : boolean
    --
    + getValue () : T
    + getType () : TestType
    + setType () : TestType
    + setValue (value:T) : void
}

@enduml