@startuml quizr


class Tag << (S,#cccccc) Struct >>
class Tag {
    - string name
}

interface Test {
    + {abstract} TestResult getResult()
    + {abstract} TestDifficulty getDifficulty()
    + {abstract} int getAttempts()
    + {abstract} int setAttempts()
}

Test "1" *-- "1" TestDifficulty : contains
enum TestDifficulty {
    EASY
    MODERATE
    HARD
}

Test "1" *-- "1" TestResult : contains
enum TestResult {
    FAILED
    PASSED
    UNATTEMPTED
}

Catagorizable "1" *-- "1" TestType : contains
Catagorizable "many" *-- "many" Tag :  contains
interface Catagorizable {
    + {abstract} getType() : TestType
    + {abstract} getTags() : Tag
}

Question <|.. Test
abstract Question <T> {
    + {abstract} setQuestion() : void
    + {abstract} getQuestion() : string
    + {abstract} getAnswer() : T
    + {abstract} setAnswer (value:T) : void
    + {abstract} checkAnswer (T attempt) : void
}


enum TestType {
    MULTIPLE_CHOICE
    SHORT_ANSWER
    TRUE_FALSE
}
Question       <|..Catagorizable
MultipleChoice <|--Question
ShortAnswer    <|--Question
TrueFalse      <|--Question

class ShortAnswer {

}
class TrueFalse {

}

TestCase <|.. Catagorizable
TestCase <|.. Test
abstract TestCase {
    + {abstract} int Score()
}

class QuestionSet<T> {

}

QuestionSet "1" *-- "many" TrueFalse: contains
QuestionSet "1" *-- "many" ShortAnswer: contains
QuestionSet "1" *-- "many" MultipleChoice: contains
QuestionSet <|.. Exam

Question *-- Answer
Answer <|.. Catagorizable
class Answer<T> {
    - value : T
    - type : TestType
    + {static} Evaluate (solution:Answer<string>, attempt:T) : boolean
    + {static} Evaluate (solution:Answer<bool>, attempt:T) : boolean
    + {static} Evaluate (solution:Answer<int>, attempt:T) : boolean
    + {static} Evaluate (solution:Answer<int[]>, attempt:T) : boolean
    --
    + getValue () : T
    + getType () : TestType
    + setType () : TestType
    + setValue (value:T) : void
}

@enduml